/*
 * Waterloo OpenData API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FoodServicesOutlet {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "self",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub param_self: Option<Option<String>>,
    #[serde(
        rename = "name",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub name: Option<Option<String>>,
    #[serde(
        rename = "image",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub image: Option<Option<Vec<crate::models::FoodServicesOutletImage>>>,
    #[serde(rename = "photo", skip_serializing_if = "Option::is_none")]
    pub photo: Option<Box<crate::models::FoodServicesOutletPhoto>>,
    #[serde(
        rename = "features",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub features: Option<Option<String>>,
    #[serde(
        rename = "outlettype",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub outlettype: Option<Option<Vec<crate::models::OutletType>>>,
    #[serde(
        rename = "outletlocation",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub outletlocation: Option<Option<String>>,
    #[serde(rename = "locationlink", skip_serializing_if = "Option::is_none")]
    pub locationlink: Option<Box<crate::models::LocationLink>>,
    #[serde(
        rename = "description",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<Option<String>>,
    #[serde(
        rename = "location",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub location: Option<Option<Vec<crate::models::OutletLocation>>>,
    #[serde(
        rename = "summary",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub summary: Option<Option<String>>,
    #[serde(
        rename = "cuisine",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub cuisine: Option<Option<Vec<crate::models::Cuisine>>>,
    #[serde(
        rename = "openinghours",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub openinghours: Option<Option<Vec<crate::models::OpeningHour>>>,
    #[serde(
        rename = "paymentaccepted",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub paymentaccepted: Option<Option<Vec<crate::models::PaymentAccepted>>>,
    #[serde(
        rename = "closed",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub closed: Option<Option<Vec<crate::models::Closed>>>,
    #[serde(
        rename = "hourschange",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub hourschange: Option<Option<Vec<crate::models::HoursChange>>>,
    #[serde(
        rename = "notice",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub notice: Option<Option<String>>,
    #[serde(
        rename = "franchisemenu",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub franchisemenu: Option<Option<Vec<crate::models::FranchiseMenu>>>,
    #[serde(
        rename = "sticky",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub sticky: Option<Option<String>>,
    #[serde(
        rename = "created",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub created: Option<Option<String>>,
}

impl FoodServicesOutlet {
    pub fn new() -> FoodServicesOutlet {
        FoodServicesOutlet {
            id: None,
            param_self: None,
            name: None,
            image: None,
            photo: None,
            features: None,
            outlettype: None,
            outletlocation: None,
            locationlink: None,
            description: None,
            location: None,
            summary: None,
            cuisine: None,
            openinghours: None,
            paymentaccepted: None,
            closed: None,
            hourschange: None,
            notice: None,
            franchisemenu: None,
            sticky: None,
            created: None,
        }
    }
}
