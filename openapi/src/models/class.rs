/*
 * Waterloo OpenData API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * Generated by: https://openapi-generator.tech
 */

/// Class : Represents an Academic class, which is a scheduled instance of a Course

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Class {
    /// Course identifier number, not unique
    #[serde(
        rename = "courseId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub course_id: Option<Option<String>>,
    /// Course offer number identifier for this class
    #[serde(rename = "courseOfferNumber", skip_serializing_if = "Option::is_none")]
    pub course_offer_number: Option<i32>,
    /// Session code for this class
    #[serde(
        rename = "sessionCode",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub session_code: Option<Option<String>>,
    /// Number identifying the section of this class
    #[serde(rename = "classSection", skip_serializing_if = "Option::is_none")]
    pub class_section: Option<i32>,
    /// Waterloo academic term code
    #[serde(
        rename = "termCode",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub term_code: Option<Option<String>>,
    /// Class number identifier for this class
    #[serde(rename = "classNumber", skip_serializing_if = "Option::is_none")]
    pub class_number: Option<i32>,
    /// Course component code for this class
    #[serde(
        rename = "courseComponent",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub course_component: Option<Option<String>>,
    /// Associated class code for this class
    #[serde(
        rename = "associatedClassCode",
        skip_serializing_if = "Option::is_none"
    )]
    pub associated_class_code: Option<i32>,
    /// Indicates the maximum number of students that can enroll in this class
    #[serde(
        rename = "maxEnrollmentCapacity",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_enrollment_capacity: Option<i32>,
    /// Indicates the current number of students enrolled in this class
    #[serde(rename = "enrolledStudents", skip_serializing_if = "Option::is_none")]
    pub enrolled_students: Option<i32>,
    /// Code describing whether No, Instructor, or Department consent to enroll is required. Overrides Course level information if different.
    #[serde(
        rename = "enrollConsentCode",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub enroll_consent_code: Option<Option<String>>,
    /// Description of the enroll requirement. Overrides Course level information if different.
    #[serde(
        rename = "enrollConsentDescription",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub enroll_consent_description: Option<Option<String>>,
    /// Code describing whether No, Instructor, or Department consent to drop is required. Overrides Course level information if different.
    #[serde(
        rename = "dropConsentCode",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub drop_consent_code: Option<Option<String>>,
    /// Description of the drop requirement. Overrides Course level information if different.
    #[serde(
        rename = "dropConsentDescription",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub drop_consent_description: Option<Option<String>>,
    /// Schedule data for this class
    #[serde(
        rename = "scheduleData",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub schedule_data: Option<Option<Vec<crate::models::ClassSchedule>>>,
    /// Instructor data for this class
    #[serde(
        rename = "instructorData",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub instructor_data: Option<Option<Vec<crate::models::ClassInstructor>>>,
}

impl Class {
    /// Represents an Academic class, which is a scheduled instance of a Course
    pub fn new() -> Class {
        Class {
            course_id: None,
            course_offer_number: None,
            session_code: None,
            class_section: None,
            term_code: None,
            class_number: None,
            course_component: None,
            associated_class_code: None,
            max_enrollment_capacity: None,
            enrolled_students: None,
            enroll_consent_code: None,
            enroll_consent_description: None,
            drop_consent_code: None,
            drop_consent_description: None,
            schedule_data: None,
            instructor_data: None,
        }
    }
}
