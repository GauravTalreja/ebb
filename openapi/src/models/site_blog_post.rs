/*
 * Waterloo OpenData API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * Generated by: https://openapi-generator.tech
 */

/// SiteBlogPost : Model representing a WCMS blog post item

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SiteBlogPost {
    /// Unique, numeric site ID
    #[serde(rename = "siteId", skip_serializing_if = "Option::is_none")]
    pub site_id: Option<i32>,
    /// Unique Id of this post item
    #[serde(
        rename = "uniqueKey",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_key: Option<Option<String>>,
    /// Title of the blog post
    #[serde(
        rename = "title",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub title: Option<Option<String>>,
    /// Content created or posted date
    #[serde(
        rename = "postedDate",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub posted_date: Option<Option<String>>,
    /// Content updated date
    #[serde(
        rename = "updatedDate",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub updated_date: Option<Option<String>>,
    /// URI to the item in WCMS
    #[serde(
        rename = "itemUri",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub item_uri: Option<Option<String>>,
    /// Intended audience tag(s)
    #[serde(
        rename = "audience",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub audience: Option<Option<String>>,
    /// Blog post content, often with HTML markup
    #[serde(
        rename = "content",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub content: Option<Option<String>>,
    /// Display name of the delegated author for this blog post
    #[serde(
        rename = "delegatedAuthorName",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub delegated_author_name: Option<Option<String>>,
    /// Link to the WCMS profiel of the delegated author
    #[serde(
        rename = "delegatedAuthorUri",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub delegated_author_uri: Option<Option<String>>,
    /// Username of the person publishing the content, not necessarily the author
    #[serde(
        rename = "publisherUsername",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_username: Option<Option<String>>,
}

impl SiteBlogPost {
    /// Model representing a WCMS blog post item
    pub fn new() -> SiteBlogPost {
        SiteBlogPost {
            site_id: None,
            unique_key: None,
            title: None,
            posted_date: None,
            updated_date: None,
            item_uri: None,
            audience: None,
            content: None,
            delegated_author_name: None,
            delegated_author_uri: None,
            publisher_username: None,
        }
    }
}
