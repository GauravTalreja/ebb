/*
 * Waterloo OpenData API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Course : An academic Course at Waterloo, a Course can be scheduled to become a Class



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Course {
    /// Course Id that identifies this Course, not unique across terms
    #[serde(rename = "courseId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub course_id: Option<Option<String>>,
    /// Course Offer Number identifies cross-listed and similar Courses that shared a Course Id in a Term
    #[serde(rename = "courseOfferNumber", skip_serializing_if = "Option::is_none")]
    pub course_offer_number: Option<i32>,
    /// Waterloo Term code for which this Course data applies
    #[serde(rename = "termCode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub term_code: Option<Option<String>>,
    /// Waterloo Term name for which this Course data applies
    #[serde(rename = "termName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub term_name: Option<Option<String>>,
    /// Academic Career code associated with Course
    #[serde(rename = "associatedAcademicCareer", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub associated_academic_career: Option<Option<String>>,
    /// The Academic Group code that is assocaited to this Course
    #[serde(rename = "associatedAcademicGroupCode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub associated_academic_group_code: Option<Option<String>>,
    /// The Academic Organization code that is associated to this Course
    #[serde(rename = "associatedAcademicOrgCode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub associated_academic_org_code: Option<Option<String>>,
    /// The Subject code for this Course
    #[serde(rename = "subjectCode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subject_code: Option<Option<String>>,
    /// The Catalog Number for this Course
    #[serde(rename = "catalogNumber", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub catalog_number: Option<Option<String>>,
    /// Course title, full name of course
    #[serde(rename = "title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub title: Option<Option<String>>,
    /// Short description of the course, often an abbreviation of the title
    #[serde(rename = "descriptionAbbreviated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description_abbreviated: Option<Option<String>>,
    /// Description of the Course content and topics
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    /// Code to describe the grading basis for this course, can be overriden at Class level
    #[serde(rename = "gradingBasis", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub grading_basis: Option<Option<String>>,
    /// Course Component Code that describes if the course is a lecture, tutorial, etc.
    #[serde(rename = "courseComponentCode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub course_component_code: Option<Option<String>>,
    /// Code describing whether No, Instructor, or Department consent to enroll is required. Can be overwridden at Class level.
    #[serde(rename = "enrollConsentCode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enroll_consent_code: Option<Option<String>>,
    /// Description of the enroll requirement. Can be overwridden at Class level.
    #[serde(rename = "enrollConsentDescription", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enroll_consent_description: Option<Option<String>>,
    /// Code describing whether No, Instructor, or Department consent to drop is required. Can be overwridden at Class level.
    #[serde(rename = "dropConsentCode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub drop_consent_code: Option<Option<String>>,
    /// Description of the drop requirement. Can be overwridden at Class level.
    #[serde(rename = "dropConsentDescription", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub drop_consent_description: Option<Option<String>>,
    /// Description of the Course requirements, such as pre-requisites, anti-requisites, and co-requisites
    #[serde(rename = "requirementsDescription", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub requirements_description: Option<Option<String>>,
}

impl Course {
    /// An academic Course at Waterloo, a Course can be scheduled to become a Class
    pub fn new() -> Course {
        Course {
            course_id: None,
            course_offer_number: None,
            term_code: None,
            term_name: None,
            associated_academic_career: None,
            associated_academic_group_code: None,
            associated_academic_org_code: None,
            subject_code: None,
            catalog_number: None,
            title: None,
            description_abbreviated: None,
            description: None,
            grading_basis: None,
            course_component_code: None,
            enroll_consent_code: None,
            enroll_consent_description: None,
            drop_consent_code: None,
            drop_consent_description: None,
            requirements_description: None,
        }
    }
}


