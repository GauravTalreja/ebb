/*
 * Waterloo OpenData API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ClassInstructor : A person instructing a Class



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ClassInstructor {
    /// Course identifier number, not unique
    #[serde(rename = "courseId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub course_id: Option<Option<String>>,
    /// Course offer number identifier for this class
    #[serde(rename = "courseOfferNumber", skip_serializing_if = "Option::is_none")]
    pub course_offer_number: Option<i32>,
    /// Session code number for this class
    #[serde(rename = "sessionCode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub session_code: Option<Option<String>>,
    /// Number identifying the section of this class
    #[serde(rename = "classSection", skip_serializing_if = "Option::is_none")]
    pub class_section: Option<i32>,
    /// Waterloo academic term code
    #[serde(rename = "termCode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub term_code: Option<Option<String>>,
    /// The code designation for the instructor's role in this class
    #[serde(rename = "instructorRoleCode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub instructor_role_code: Option<Option<String>>,
    /// The Instructors preferred first name
    #[serde(rename = "instructorFirstName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub instructor_first_name: Option<Option<String>>,
    /// The Instructors preferred last name
    #[serde(rename = "instructorLastName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub instructor_last_name: Option<Option<String>>,
    /// A unique identifier that persists through name changes. Not guaranteed, but likely to be immutable for instructor.
    #[serde(rename = "instructorUniqueIdentifier", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub instructor_unique_identifier: Option<Option<String>>,
    /// Identifier for the class meeting this instructor is for
    #[serde(rename = "classMeetingNumber", skip_serializing_if = "Option::is_none")]
    pub class_meeting_number: Option<i32>,
}

impl ClassInstructor {
    /// A person instructing a Class
    pub fn new() -> ClassInstructor {
        ClassInstructor {
            course_id: None,
            course_offer_number: None,
            session_code: None,
            class_section: None,
            term_code: None,
            instructor_role_code: None,
            instructor_first_name: None,
            instructor_last_name: None,
            instructor_unique_identifier: None,
            class_meeting_number: None,
        }
    }
}


