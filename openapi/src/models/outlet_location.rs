/*
 * Waterloo OpenData API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct OutletLocation {
    #[serde(
        rename = "lid",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub lid: Option<Option<String>>,
    #[serde(
        rename = "name",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub name: Option<Option<String>>,
    #[serde(
        rename = "street",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub street: Option<Option<String>>,
    #[serde(
        rename = "additional",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub additional: Option<Option<String>>,
    #[serde(
        rename = "city",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub city: Option<Option<String>>,
    #[serde(
        rename = "province",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub province: Option<Option<String>>,
    #[serde(
        rename = "postal_code",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub postal_code: Option<Option<String>>,
    #[serde(
        rename = "country",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub country: Option<Option<String>>,
    #[serde(
        rename = "latitude",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub latitude: Option<Option<String>>,
    #[serde(
        rename = "longitude",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub longitude: Option<Option<String>>,
    #[serde(
        rename = "source",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub source: Option<Option<String>>,
    #[serde(
        rename = "is_primary",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub is_primary: Option<Option<String>>,
    #[serde(rename = "locpick", skip_serializing_if = "Option::is_none")]
    pub locpick: Option<Box<crate::models::Locpick>>,
    #[serde(
        rename = "province_name",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub province_name: Option<Option<String>>,
    #[serde(
        rename = "country_name",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub country_name: Option<Option<String>>,
}

impl OutletLocation {
    pub fn new() -> OutletLocation {
        OutletLocation {
            lid: None,
            name: None,
            street: None,
            additional: None,
            city: None,
            province: None,
            postal_code: None,
            country: None,
            latitude: None,
            longitude: None,
            source: None,
            is_primary: None,
            locpick: None,
            province_name: None,
            country_name: None,
        }
    }
}
