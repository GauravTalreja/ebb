/*
 * Waterloo OpenData API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SiteOpportunity : Model representing a WCMS Opportunity (Job)



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SiteOpportunity {
    /// Unique, numeric site ID
    #[serde(rename = "siteId", skip_serializing_if = "Option::is_none")]
    pub site_id: Option<i32>,
    /// Unique Id of this opportunity item
    #[serde(rename = "uniqueKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub unique_key: Option<Option<String>>,
    /// Title of the opportunity
    #[serde(rename = "title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub title: Option<Option<String>>,
    /// Username of the user that published this item
    #[serde(rename = "publisherUsername", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub publisher_username: Option<Option<String>>,
    /// Last updated date
    #[serde(rename = "updatedDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub updated_date: Option<Option<String>>,
    /// Type of opportunity (ie: volunteer, paid)
    #[serde(rename = "opportunityType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub opportunity_type: Option<Option<String>>,
    /// Employment type (ie: part, full, other)
    #[serde(rename = "employmentType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub employment_type: Option<Option<String>>,
    /// Rate of paay description
    #[serde(rename = "rateOfPay", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rate_of_pay: Option<Option<String>>,
    /// Rate of pay type
    #[serde(rename = "rateOfPayType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rate_of_pay_type: Option<Option<String>>,
    /// Opportunity description/content, usually includes HTML markup
    #[serde(rename = "content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub content: Option<Option<String>>,
    /// Posted or open for application date
    #[serde(rename = "postedOrOpenDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub posted_or_open_date: Option<Option<String>>,
    /// Posted or open date time zone
    #[serde(rename = "postedOrOpenDateTimeZone", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub posted_or_open_date_time_zone: Option<Option<String>>,
    /// Opportunity application deadline date
    #[serde(rename = "applicationDeadlineDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub application_deadline_date: Option<Option<String>>,
    /// Start date for the opportunity
    #[serde(rename = "startDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<Option<String>>,
    /// End date for the opportunity
    #[serde(rename = "endDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<Option<String>>,
    /// Number of positions available for this opportunity
    #[serde(rename = "numberOfPositions", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub number_of_positions: Option<Option<String>>,
    /// URI for an external applicaton website
    #[serde(rename = "applicationUri", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub application_uri: Option<Option<String>>,
}

impl SiteOpportunity {
    /// Model representing a WCMS Opportunity (Job)
    pub fn new() -> SiteOpportunity {
        SiteOpportunity {
            site_id: None,
            unique_key: None,
            title: None,
            publisher_username: None,
            updated_date: None,
            opportunity_type: None,
            employment_type: None,
            rate_of_pay: None,
            rate_of_pay_type: None,
            content: None,
            posted_or_open_date: None,
            posted_or_open_date_time_zone: None,
            application_deadline_date: None,
            start_date: None,
            end_date: None,
            number_of_positions: None,
            application_uri: None,
        }
    }
}


